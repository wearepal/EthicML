name: EthicML CI

on:
  pull_request:
    branches:
    - main
    paths-ignore:
    - 'docs/**'
    - 'examples/**'
    - '**/*.md'
    - .github/dependabot.yml
    - .github/release.yml
    - .github/workflows/docs.yml
    - .github/workflows/dummy_ci.yml
    - .github/workflows/dependabot_auto.yml
    - .github/workflows/labeler.yml
    - .gitignore
    - CODEOWNERS
    - LICENSE
    - make_release.sh
    - CITATION.cff

env:
  PYTHON_VERSION: "3.8"


jobs:

  lint_with_pylint:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install pylint
      run: |
        python -m pip install --upgrade pip
        pip install pylint
    - name: Lint with pylint
      run: |
        pylint --fail-under=8.5 ethicml/
        pylint --fail-under=8.5 tests/

  format_with_black_and_isort:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install black
      run: |
        python -m pip install --upgrade pip
        pip install 'black<=23' isort
    - name: Format with black
      run: |
        python -m black --check -l 100 -t py37 -S ethicml/
        python -m black --check -l 100 -t py37 -S tests/
    - name: Format with isort
      run: |
        isort . --check --diff

  check_docstrings:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    - name: Install pydocstyle
      run: |
        python -m pip install --upgrade pip
        pip install wheel
        pip install 'pydocstyle[toml]'
        pip install -r docs/requirements.txt
    - name: Install pandoc
      run: sudo apt-get install -y pandoc
    - name: Check docstrings with pydocstyle
      run: |
        pydocstyle --count -e ethicml
    - name: Build with sphinx
      run: |
        sphinx-build -W -b html ./docs ./docs/_build

  check_with_darglint:

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install darglint
      run: |
        python -m pip install --upgrade pip
        pip install darglint
    - name: Check with darglint
      run: |
        sh run_darglint.sh

  test_minimal_dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install Poetry
        uses: snok/install-poetry@v1.2
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Set ENV VARS
        run: |
          echo "POETRY_VERSION=$(poetry -V | cut -d' ' -f3)" >> $GITHUB_ENV

      #----------------------------------------------
      # cache the directory where poetry caches packages
      #----------------------------------------------
      - name: Cache Poetry cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: poetry-cache-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ env.POETRY_VERSION }}
      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-root
      - name: Test import
        run: |
          poetry run python -c "import ethicml"

  test_with_pytest:
    needs: [lint_with_pylint, format_with_black_and_isort, check_docstrings, check_with_darglint, test_minimal_dependencies]
    runs-on: ubuntu-latest

    steps:
      #----------------------------------------------
      #  ---  check-out repo and set-up python ---
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1.2
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Set ENV VARS
        run: |
          echo "POETRY_VERSION=$(poetry -V | cut -d' ' -f3)" >> $GITHUB_ENV

      #----------------------------------------------
      # cache the directory where poetry caches packages
      #----------------------------------------------
      - name: Cache Poetry cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: poetry-cache-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ env.POETRY_VERSION }}

      #----------------------------------------------
      # cache the directory where pip caches packages
      #----------------------------------------------
      - name: Cache Pip cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-cache-${{ runner.os }}-${{ env.PYTHON_VERSION }}

      #----------------------------------------------
      #  ---------  install dependencies  --------
      #----------------------------------------------
      - name: Install dependencies
        run: |
          poetry install -E ci --no-interaction --no-root
          poetry run pip install torch --extra-index-url https://download.pytorch.org/whl/cpu


      #----------------------------------------------
      #  -----           Run MyPy             -----
      #----------------------------------------------
      - name: Type check with mypy
        run: |
          poetry run python run_mypy.py
          poetry run python run_mypy_tests.py

      #----------------------------------------------
      #  -----           Run Tests            -----
      #----------------------------------------------
      - name: Test with pytest
        run: |
          poetry run python -m pytest -vv -n 2 --dist loadgroup --cov=ethicml --cov-fail-under=80  tests/
