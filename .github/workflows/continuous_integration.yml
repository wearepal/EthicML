name: EthicML CI

on:
  pull_request:
    branches:
    - main
    paths-ignore:
    - 'docs/**'
    - 'examples/**'
    - '**/*.md'
    - .github/dependabot.yml
    - .github/labeler.yml
    - .github/workflows/docs.yml
    - .github/workflows/dummy_ci.yml
    - .github/workflows/dependabot_auto.yml
    - .github/workflows/labeler.yml
    - .gitignore
    - CODEOWNERS
    - LICENSE
    - make_release.sh
    - CITATION.cff

jobs:

  lint_with_pylint:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Install pylint
      run: |
        python -m pip install --upgrade pip
        pip install pylint
    - name: Lint with pylint
      run: |
        pylint --fail-under=8.5 ethicml/
        pylint --fail-under=8.5 tests/

  format_with_black_and_isort:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Install black
      run: |
        python -m pip install --upgrade pip
        pip install 'black<=23' isort
    - name: Format with black
      run: |
        python -m black --check -l 100 -t py37 -S ethicml/
        python -m black --check -l 100 -t py37 -S tests/
    - name: Format with isort
      run: |
        isort . --check --diff

  check_docstrings:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"
    - name: Install pydocstyle
      run: |
        python -m pip install --upgrade pip
        pip install wheel
        pip install 'pydocstyle[toml]' sphinx autodocsumm typing_extensions furo toml
    - name: Check docstrings with pydocstyle
      run: |
        pydocstyle --count -e ethicml
    - name: Build with sphinx
      run: |
        sphinx-build -W -b html ./docs ./docs/_build

  test_with_pytest:
    needs: [lint_with_pylint, format_with_black_and_isort, check_docstrings]
    runs-on: ubuntu-latest

    steps:
      #----------------------------------------------
      #  ---  check-out repo and set-up python ---
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1.2
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Set up Poetry cache for Python dependencies
        id: cached-poetry-dependencies
        # uses: actions/cache@v2
        uses: pat-s/always-upload-cache@v2
        with:
          path: .venv
          key: venvEM2-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install -E ci --no-interaction --no-root
          poetry run pip install torch --extra-index-url https://download.pytorch.org/whl/cpu


      #----------------------------------------------
      #  -----           Run MyPy             -----
      #----------------------------------------------
      - name: Type check with mypy
        run: |
          poetry run python run_mypy.py
          poetry run python run_mypy_tests.py

      #----------------------------------------------
      #  -----           Run Tests            -----
      #----------------------------------------------
      - name: Test with pytest
        run: |
          poetry run python -m pytest -vv -n 2 --dist loadgroup --cov=ethicml --cov-fail-under=80  tests/
