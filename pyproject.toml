[project]
name = "EthicML"
version = "2.0.0.dev0"
description = "EthicML is a library for performing and assessing algorithmic fairness. Unlike other libraries, EthicML isn't an education tool, but rather a researcher's toolkit."
readme = "README.md"
authors = [
    {name = "PAL", email = "info@wearepal.ai"},
]
classifiers = [
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Typing :: Typed",
]
keywords = [
    "ml",
    "fairness",
]
requires-python = "<3.13,>=3.10"
dependencies = [
    "filelock",
    "jinja2",
    "joblib<2.0.0,>=1.1.0",
    "networkx",
    "numpy>=1.23.2",
    "pandas>=1.5.0",
    "pillow>=8.4.0",
    "ranzen!=2.1.0,<3.0.0,>=2.0.1",
    "requests",
    "sympy<2.0,>=1.12",
    "teext<1.0.0,>=0.1.3",
    "typing-extensions>=4.5",
]

[project.urls]
repository = "https://github.com/wearepal/EthicML"

[project.optional-dependencies]
models = [
    "GitPython<4.0.0,>=3.1.20",
    "cloudpickle<3.0.0,>=2.0.0",
    "fairlearn==0.8.0",
    "gitdb2==4.0.2",
    "pdm<3.0.0,>=2.4.0",
    "scipy<2.0.0,>=1.7.2",
    "smmap2==3.0.1",
]
data = [
    "folktables>=0.0.12",
]
plot = [
    "matplotlib>=3.8",
    "seaborn>=0.9.0",
]
metrics = [
    "scikit-learn>=0.20.1",
]

[dependency-groups]
dev = [
    "pre-commit<3.0.0,>=2.20.0",
]
test = [
    "pytest<8.0.0,>=6.2.2",
    "pytest-cov<4.0,>=2.6",
    "omegaconf>=2.2.1",
    "pytest-xdist<3.0.0,>=2.5.0",
    "pip<23.0.0,>=22.3.1",
]
typecheck = [
    "mypy>=0.990",
    "pandas-stubs>=1.4.2.220626",
    "python-type-stubs @ git+https://github.com/wearepal/python-type-stubs.git@8d5f608",
    "types-seaborn<1.0.0.0,>=0.13.2.20240205",
]
lint = [
    "ruff>=0.2.2",
]
doclint = [
    "pydoclint<1.0.0,>=0.3.6",
]
docs = [
    "sphinx",
    "autodocsumm",
    "furo",
    "toml",
    "nbsphinx @ git+https://github.com/tmke8/nbsphinx.git@9f17483",
    "ipython-pygments",
]
ci = [
    "omegaconf>=2.2.2",
]
torchcpu = [
    "torch; sys_platform == \"linux\"",
    "torchvision; sys_platform == \"linux\"",
]

[tool.hatch.build.targets.sdist]
include = [
  "ethicml/**/*.py",
  "ethicml/py.typed",
  "ethicml/data/csvs/**",
]
exclude = [
  "ethicml/data/csvs/raw/**"
]

[tool.uv]
default-groups = ["dev", "test", "typecheck", "lint", "doclint"]

[tool.uv.sources]
torch = [
  { index = "torch-cpu", group = "torchcpu" },
]

[[tool.uv.index]]
name = "torch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.isort]
known_third_party = ["PIL", "black", "git", "fairlearn", "kit", "matplotlib", "mypy", "numpy", "pandas", "pylint", "pytest", "scipy", "seaborn", "setuptools", "sklearn", "tap", "teext", "torch"]
known_future_library = []
extra_standard_library = ["__future__", "typing_extensions"]
profile = "black"
line_length = 100
force_sort_within_sections = "True"
classes = ["LR", "LRCV", "SVM", "VFAE", "MLP", "DRO", "TPR", "TNR", "CV", "NMI", "BCR", "PPV", "NPV", "AS", "F1", "HGR"]

[tool.mypy]
python_version = "3.10"
no_implicit_optional = true
allow_redefinition = true
strict_equality = true
check_untyped_defs = true
warn_unreachable = true
#disallow_any_unimported = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
show_error_codes = true
# warn_unused_ignores = true
mypy_path = "typings"
# implicit_reexport = false
warn_redundant_casts = true
enable_error_code = ["possibly-undefined", "redundant-expr", "truthy-bool", "truthy-iterable"]
local_partial_types = true

# ========== imports that don't have types ===========

[[tool.mypy.overrides]]
module = [
    "aif360.*",
    "cloudpickle",
    "fairlearn.*",
    "folktables.*",
    "imageio",
    "scipy.*",
    "sklearn.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["pytest.*"]
follow_imports = "skip"
follow_imports_for_stubs = true

[tool.pyright]
typeCheckingMode = "strict"
pythonVersion = "3.10"
reportMissingTypeArgument = "none"
reportUnnecessaryComparison = "none"
reportCallInDefaultInitializer = "warning"
reportPropertyTypeMismatch = "warning"
reportUninitializedInstanceVariable = "warning"
reportPrivateUsage = "warning"
reportUnnecessaryTypeIgnoreComment = "warning"
reportConstantRedefinition = "warning"
# these errors are a bit annoying
reportUnknownMemberType = "none"
reportUnknownVariableType = "none"
reportUnknownParameterType = "none"
reportUnknownArgumentType = "none"
reportUnknownLambdaType = "none"
venvPath = "/home/tmk/.cache/pypoetry/virtualenvs"
venv = "ethicml-dzQunYke-py3.10"

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.format]
quote-style = "preserve"

[tool.ruff.lint]
select = [
    "A", # flake8-builtins
    # "ANN", # flake8-annotations
    "ARG", # flake8-unused-args
    "B", # bugbear
    "C4", # flake8-comprehensions
    "D", # pydocstyle
    "E", # pycodestyle
    "F", # pyflakes
    "FBT", # boolean trap
    "I", # isort
    "INP", # implicit namespace package
    "N", # pep8-naming
    "NPY", # numpy
    "PD", # pandas-vet
    "PLC", # pylint convention
    "PLE", # pylint error
    "PLR", # pylint refactor
    "PLW", # pylint warning
    "PT", # pytest-style
    "PTH", # flake8-use-pathlib
    "SIM", # flake8-simplify
    # "TCH", # flake8-type-checking
    "UP", # pyupgrade
    "W",
]
ignore = [
    "A003", # builtins as class attribute
    "D105", # magic methods
    "D107", # __init__
    "D206", # indent with spaces (conflicts with formatter)
    "D208", # over indentation
    "D401", # imperative mood
    "E501", # line too long (conflicts with formatter)
    "N812", # case of import alias
    "NPY002", # no global random state
    "PD002", # no inplace
    "PD015", # no pd.merge
    "PD901", # forbidding "df" as a variable name
    "PLR0402", # useless import alias
    "PLR2004", # magic number comparison
    "PT013", # don't allow `from pytest import ...`
    "PLR0913", # too many arguments
    "PLW2901", # overwriting loop variables
    "PLC0105", # mark variance in typevar name
    "TID252", # relative imports
    "UP038", # use X | Y in isinstance
    "W191", # tab indentation (conflicts with formatter)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F403",
    "PLC0414", # reexporting
]
"ethicml/*" = [
    "PT018",
]

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.ruff.lint.isort]
known-third-party = ["PIL", "black", "git", "fairlearn", "matplotlib", "mypy", "numpy", "pandas", "pylint", "pytest", "scipy", "seaborn", "setuptools", "sklearn", "teext", "torch"]
extra-standard-library = ["typing_extensions"]
no-lines-before = ["future", "standard-library"]
force-sort-within-sections = true
split-on-trailing-comma = false
classes = ["LR", "LRCV", "SVM", "VFAE", "MLP", "DRO", "TPR", "TNR", "CV", "NMI", "BCR", "PPV", "NPV", "AS", "F1", "HGR"]

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true

[tool.ruff.lint.flake8-type-checking]
exempt-modules = ["typing", "typing_extensions"]

[tool.ruff.lint.pep8-naming]
ignore-names = ["C"]

[tool.ruff.lint.pylint]
max-statements = 60  # default: 50
max-branches = 13  # default: 12

[tool.pydoclint]
style = "sphinx"
# we don't put types in docstrings
arg-type-hints-in-docstring = false
check-return-types = false
check-yield-types = false
check-class-attributes = false
