[tool.poetry]
name = "EthicML"
version = "1.0.0-alpha.4"
description = "EthicML is a library for performing and assessing algorithmic fairness. Unlike other libraries, EthicML isn't an education tool, but rather a researcher's toolkit."
readme="README.md"
authors = ["PAL <info@wearepal.ai>"]
packages = [
  { include = "ethicml" },
]
include=["ethicml/py.typed"]
exclude = ["ethicml/data/csvs/raw/*"]
classifiers=[
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Typing :: Typed",
]
keywords=["ml", "fairness"]
repository="https://github.com/wearepal/EthicML"

[tool.poetry.dependencies]
python = ">=3.8,<3.11"
GitPython = "^3.1.20"
matplotlib = ">=3.0.2"
numpy = ">=1.20.1"
pandas = "^1.0"
pipenv = ">=2018.11.26"
Pillow = "^9.0.1"
scikit-learn = ">=0.20.1"
seaborn = ">=0.9.0"
teext = "^0.1.3"
tqdm = ">=4.31.1"
typing-extensions = ">=4.0"
fairlearn = { version = "0.7.0", optional = true }
cloudpickle = { version = "^2.0.0", optional= true }
pytest = { version = ">=6.2.2,<8.0.0", optional = true }
pytest-cov = { version = ">=2.6,<4.0", optional = true }
gitdb2 = "4.0.2"
smmap2 = "3.0.1"
folktables = "^0.0.11"
ranzen = "^1.1.1"
joblib = "^1.1.0"
scipy = "^1.7.2"
omegaconf = { version = ">=2.2.1", optional = true }

[tool.poetry.extras]
ci = ["fairlearn","pytest","pytest-cov","cloudpickle","omegaconf"]
all = ["fairlearn","cloudpickle"]

[tool.poetry.dev-dependencies]
black = "^22.0"
isort = "5.10.1"
mypy = ">=0.950"
pre-commit = "^2.19.0"
pydocstyle = {version = "^6.1.1", extras = ["toml"]}
pylint = "^2.13.5"
pytest = ">=6.2.2,<8.0.0"
pytest-cov = ">=2.6,<4.0"
python-type-stubs = {git = "https://github.com/wearepal/python-type-stubs.git", rev = "2f140fb"}
pandas-stubs = ">=1.4.2.220626"
types-Pillow = "^9.0.19"
omegaconf = ">=2.2.1"
pytest-xdist = "^2.5.0"

[tool.black]
line-length = 100
target-version = ['py37']
include = '''
(
  ethicml/(.*).pyi?$
  | tests/(.*).pyi?$
)
'''
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.venv
    | .*/\.venv
    | _build
    | buck-out
    | build
    | dist
    | .github
    | docs
    | docsource
    | examples
    | plots
    | results
    | \.editorconfig
    | \.gitignore
    | \.pytest_cache
    | \.coverage.*
    | .pre-commit-config.yaml
    | .pylintrc
    | CODEOWNERS
    | LICENSE
    | mypy.ini
    | README.md
  )/
)
'''
skip-string-normalization = true

[tool.isort]
known_third_party = ["PIL", "black", "git", "fairlearn", "kit", "matplotlib", "mypy", "numpy", "pandas", "pylint", "pytest", "scipy", "seaborn", "setuptools", "sklearn", "tap", "teext", "torch", "tqdm"]
extra_standard_library = ["typing_extensions"]
profile = "black"
line_length = 100

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
python_version = "3.8"
no_implicit_optional = true
allow_redefinition = true
strict_equality = true
check_untyped_defs = true
warn_unreachable = true
#disallow_any_unimported = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
show_error_codes = true
warn_unused_ignores = true
mypy_path = "typings"

# ===== the following modules in EthicML aren't ready to be type checked so strictly =====
[[tool.mypy.overrides]]
module = ["tests.*", "ethicml.implementations.*", "ethicml.models.inprocess.fair_gpyt"]
disallow_untyped_defs = false
disallow_incomplete_defs = false

# ========== imports that don't have types ===========

[[tool.mypy.overrides]]
module = [
    "aif360.*",
    "black.*",
    "cloudpickle",
    "fairlearn.*",
    "folktables.*",
    "imageio",
    "pylint.*",
    "pytest.*",
    "setuptools.*",
    "scipy.spatial.distance",
    "sklearn.*",
    "torch.*",
    "tqdm.*"
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "ranzen.*",
    "pytest.*",
]
follow_imports = "skip"
follow_imports_for_stubs = true

[tool.pydocstyle]
convention = "pep257"
add_ignore = ["D105", "D107", "D401"]
ignore_decorators = "implements|overload"
match = "(?!(test_|__init__)).*\\.py"
